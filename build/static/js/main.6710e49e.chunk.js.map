{"version":3,"sources":["logo.svg","App.js","main/main.js","router.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","es","to","routes","path","component","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","history","browserHistory","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCgBzBC,MAZf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,SAAT,wCCiBON,ICEAO,EAlBA,CACb,CACEC,KAAM,IACNC,UAAWT,GAOX,CACAQ,KAAM,QACNC,UDjBJ,WACE,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzCX,EAAAC,EAAAC,cAAA,iBACOF,EAAAC,EAAAC,cAAA,0BADP,wBAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVS,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,0BEAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACPrB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAQkB,QAASC,IAAgBjB,OAAQA,IASxCkB,SAASC,eAAe,SD8GrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6710e49e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Link } from 'react-router';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Link to=\"/main\">\n            Todo应用\n        </Link>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// import App from './App';\r\nimport React, { Component } from 'react';\r\nimport { Router, Route, Link, browserHistory, IndexRoute } from 'react-router';\r\nimport App from './App'\r\nimport Main from './main/main'\r\n\r\n\r\n// 核心概念\r\n\r\nconst routes = [\r\n  {\r\n    path: '/',\r\n    component: App,\r\n    // breadcrumbName:\"home\",\r\n    // indexRoute: { component: Home }, \r\n    // childRoutes: [\r\n    //   { path: 'advanced', breadcrumbName:\"advanced\", component: Advanced},\r\n    //   { path: 'todoList', breadcrumbName:\"todoList\", component: TodoList },\r\n    // ]\r\n  },{\r\n    path: '/main',\r\n    component: Main\r\n  }\r\n]\r\n\r\n\r\n\r\nexport default routes","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, Route, Link, browserHistory, IndexRoute } from 'react-router';\nimport routes from './router'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render((\n  <Router history={browserHistory} routes={routes} >\n  {/* <IndexRoute component={Home} /> */}\n    {/* <Route path=\"/\" breadcrumbName=\"Home\" component={App}>\n      <IndexRoute component={Home} />\n      <Route path=\"main\" breadcrumbName=\"Main\" component={Main} />\n      <Route path=\"advanced\" breadcrumbName=\"Advanced\" component={Advanced} />\n      <Route path=\"todoList\" breadcrumbName=\"TodoList\" component={TodoList} />\n    </Route> */}\n  </Router>\n), document.getElementById('root'))\n\nserviceWorker.unregister();"],"sourceRoot":""}